// Example 1 - –ë–ª–æ–≥–≥–µ—Ä
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Blogger –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—å–µ–∫—Ç–∞ –±–ª–æ–≥–≥–µ—Ä–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–≤–æ–π—Å—Ç–≤–∞–º–∏:

// email - –ø–æ—á—Ç–∞, —Å—Ç—Ä–æ–∫–∞
// age - –≤–æ–∑—Ä–∞—Å—Ç, —á–∏—Å–ª–æ
// numberOfPosts - –∫–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤, —á–∏—Å–ª–æ
// topics - –º–∞—Å—Å–∏–≤ —Ç–µ–º –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –±–ª–æ–≥–≥–µ—Ä
// –ö–ª–∞—Å—Å –æ–∂–∏–¥–∞–µ—Ç –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–¥–Ω–æ–∏–º—ë–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏.

// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ getInfo(), –∫–æ—Ç–æ—Ä—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É: User ${–ø–æ—á—Ç–∞} is ${–≤–æ–∑—Ä–∞—Å—Ç} years old and has ${–∫–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤} posts.

// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ updatePostCount(value), –∫–æ—Ç–æ—Ä—ã–π –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ value –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

// class Blogger {
//   constructor({ name, age, numberOfPosts, topics }) {
//     this.name = name;
//     this.age = age;
//     this.numberOfPosts = numberOfPosts;
//     this.topics = topics;
//   }

//   getInfo() {
//     return `User ${this.name} is ${this.age} years old and has ${this.numberOfPosts} posts.`;
//   }

//   updatePostCount(value) {
//     this.numberOfPosts += value;
//   }
// }

// const mango = new Blogger({
//   name: 'mango@mail.com',
//   age: 24,
//   numberOfPosts: 20,
//   topics: ['tech', 'cooking'],
// });
// console.log(mango);
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 20 posts
// mango.updatePostCount(5);
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 25 posts
// console.log(mango);

// const poly = new User({
//   name: 'poly@mail.com',
//   age: 19,
//   numberOfPosts: 17,
//   topics: ['sports', 'gaming', 'health'],
// });
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 17 posts
// poly.updatePostCount(4);
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 21 posts
//
//
//
//
//
//
//
//Example 2 - –•—Ä–∞–Ω–∏–ª–∏—â–µ
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Storage –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤, –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –µ–≥–æ –≤ —Å–≤–æ–π—Å—Ç–≤–æ items.

// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞:

// getItems() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤.
// addItem(item) - –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫ —Ç–µ–∫—É—â–∏–º.
// removeItem(item) - –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ —Ç–µ–∫—É—â–∏—Ö.

// class Storage {
//   constructor(items) {
//     this.items = items;
//   }

//   getItems() {
//     return this.items;
//   }

//   addItem(item) {
//     this.items.push(item);
//   }

//   removeItem(item) {
//     this.items = this.items.filter((el) => el !== item)
//   };
// }

// const storage = new Storage(['üçé', 'üçã', 'üçá', 'üçë']);

// const items = storage.getItems();
// console.table(items); // [ 'üçé', 'üçã', 'üçá', 'üçë' ]

// storage.addItem('üçå');
// console.table(storage.items); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]

// storage.removeItem('üçã');
// console.table(storage.items); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]
//
//
///
//
//
//
//
//
// Example 3 - User
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å User –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ login –∏ email. –û–±—ä—è–≤–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ #login –∏ #email, –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä—ã–º —Å–¥–µ–ª–∞–π —á–µ—Ä–µ–∑ –≥–µ—Ç—Ç–µ—Ä –∏ —Å–µ—Ç—Ç–µ—Ä login –∏ email.

// class User {
//   #login;
//   #email;
//   constructor({ login, email }) {
//     this.#login = login;
//     this.#email = email;
//   }
//   get login() {
//     return this.#login;
//   }
//   set login(newLogin) {
//     return (this.#login = newLogin);
//   }

// get email() {
//     return this.#email;
//   }
//   set email(newEmail) {
//     return (this.#email = newEmail);
//   }
// }

// const mango = new User({
//   login: 'Mango',
//   email: 'mango@dog.woof',
// });

// console.log(mango.login); // Mango
// mango.login = 'Mangodoge';
// console.log(mango.login); // Mangodoge

// const poly = new User({
//   login: 'Poly',
//   email: 'poly@mail.com',
// });

// console.log(poly.login); // Poly
// poly.login = 'Polycutie';
// console.log(poly.login); // Polycutie

//
//
//
//
//
//
//
//

// Example 4 - –ó–∞–º–µ—Ç–∫–∏
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Notes –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –∑–∞–º–µ—Ç–æ–∫ –≤ —Å–≤–æ–π—Å—Ç–≤–µ items. –ó–∞–º–µ—Ç–∫–∞ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ text –∏ priority. –î–æ–±–∞–≤—å –∫–ª–∞—Å—Å—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ Priority, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.

// {
//   LOW: 'low',
//   NORMAL: 'normal',
//   HIGH: 'high'
// }
// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥—ã addNote(note), removeNote(text) –∏ updatePriority(text, newPriority).

// class Notes {
//   static Priority = {
//     LOW: 'low',
//     NORMAL: 'normal',
//     HIGH: 'high',
//   };

//   constructor(items = []) {
//     this.items = items;
//   }

//   addNote(note) {
//     this.items.push(note);
//   }

//   removeNote(text) {
//     // const index = this.items.findIndex(({ text: noteText }) => text === noteText)
//     // this.items.splice(index, 1)

//     this.items = this.items.filter(({ text: noteText }) => text !== noteText);
//   }

//   updateNote(text, newPriority) {
//     const targetObj = this.items.find(
//       ({ text: noteText }) => text === noteText
//     );
//     console.log(targetObj);
//     targetObj.priority = newPriority;
//   }
// }

// const myNotes = new Notes([]);

// myNotes.addNote({ text: '–ú–æ—è –ø–µ—Ä–≤–∞—è –∑–∞–º–µ—Ç–∫–∞', priority: Notes.Priority.LOW });
// console.log(myNotes.items);

// myNotes.addNote({
//   text: '–ú–æ—è –≤—Ç–æ—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞',
//   priority: Notes.Priority.NORMAL,
// });
// console.log(myNotes.items);

// myNotes.removeNote('–ú–æ—è –ø–µ—Ä–≤–∞—è –∑–∞–º–µ—Ç–∫–∞');
// console.log(myNotes.items);

// myNotes.updateNote('–ú–æ—è –≤—Ç–æ—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞', Notes.Priority.HIGH);
// console.log(myNotes.items);

// class User {
//   email;

//   constructor(email) {
//     this.email = email;
//   }

//   get email() {
//     return this.email;
//   }

//   set email(newEmail) {
//     this.email = newEmail;
//   }
// }
// class Admin extends User {
//   // Change code below this line

//   static AccessLevel = {
//     BASIC: 'basic',
//     SUPERUSER: 'superuser',
//   };

//   constructor({ email, accessLevel, blacklistedEmails = [] }) {
//     super(email);
//     this.accessLevel = accessLevel;
//     this.blacklistedEmails = blacklistedEmails;
//   }

//   blacklist(email) {
//     this.blacklistedEmails.push(email);
//   }

//   isBlacklisted(email) {
//     this.blacklistedEmails.some(el => el === email);
//   }

//   // Change code above this line
// }

// const mango = new Admin({
//   email: 'mango@mail.com',
//   accessLevel: Admin.AccessLevel.SUPERUSER,
// });

// console.log(mango.email); // "mango@mail.com"
// console.log(mango.accessLevel); // "superuser"

// mango.blacklist('poly@mail.com');
// console.log(mango.blacklistedEmails); // ["poly@mail.com"]
// console.log(mango.isBlacklisted('mango@mail.com')); // false
// console.log(mango.isBlacklisted('poly@mail.com')); // true

// function sumOfIntegers(num) {
//   let result = 0;
//   for (let i = 1; i <= num; i++) {
//     result += i;
//   }
//   return result;
// }
// console.log(sumOfIntegers(8));

// –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.

// const arr = [12, 23, 233, 12, 2323, 33];

// const uniqueArr = array => array.filter((el, i, ar) => ar.indexOf(el) === i);

// console.log(uniqueArr(arr));

// function unique(array) {
//   let uniqueNums = [];
//   for (let i = 0; i < array.length; i++) {
//     if (!uniqueNums.includes(array[i])) {
//       uniqueNums.push(array[i]);
//     }
//   }
//   return uniqueNums;
// }

// console.log(unique([2,5,8,7,6,4,2,3]));

// function unique(array) {
//   let unique = [];
//   for (const arr of array) {
//     if (!unique.includes(arr)) {
//       unique.push(arr);
//     }
//   }
//   return unique;
// }

// console.log(unique([2, 5, 8, 7, 6, 4, 2, 3]));

// –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç —Å –ø–æ–ª—è–º–∏ "–±–∞–ª–∞–Ω—Å", "–≤–ª–∞–¥–µ–ª–µ—Ü" –∏ "–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞". –î–æ–±–∞–≤—å—Ç–µ –≤ –æ–±—ä–µ–∫—Ç –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å. –î–æ–±–∞–≤—å—Ç–µ –≤ –æ–±—ä–µ–∫—Ç –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∑–≤–æ–ª—è—Ç—å –∏–∑–º–µ–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—á–µ—Ç—É. –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –≤—ã–∑–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö.

// –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∑–∞–¥–∞–Ω–Ω–æ–π –±—É–∫–≤—ã.
// const arr = ['sdsdsd', 'sdsdsdsd', 'aaaa']

// const filterByLetter = (array, letter) => array.filter(el => el[0] === letter);

// console.log(filterByLetter(arr, 's'))

// –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å –ø–æ–ª—è–º–∏ "–Ω–∞–∑–≤–∞–Ω–∏–µ", "–∞–≤—Ç–æ—Ä—ã" –∏ "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥". –î–æ–±–∞–≤—å—Ç–µ –≤ –æ–±—ä–µ–∫—Ç –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –≤ –∫–æ–Ω—Å–æ–ª—å. –î–æ–±–∞–≤—å—Ç–µ –≤ –æ–±—ä–µ–∫—Ç –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∑–≤–æ–ª—è—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É. –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –≤—ã–∑–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö.

// const library = {
//   name: 'Ly4waya Bibla',
//   bookNames: [],
//   authors: [],
//   booksCount: 0,

//   getInfo() {
//     return `–ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: ${this.name}, –ê–≤—Ç–æ—Ä—ã: ${this.authors}, –ö–Ω–∏–≥–∏:${this.bookNames} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥: ${this.booksCount}`;
//   },

//   addBook({ bookName, author, quantity }) {
//     this.bookNames.push(bookName);
//     this.authors.push(author);
//     this.booksCount += quantity;
//   },
// };
// const book = {
//   bookName: 'Neznaika',
//   author: 'SDKMSLKn',
//   quantity: 1,
// };

// library.addBook(book);
// console.log(library.getInfo());
// console.log(library.authors)

// const library2 = Object.create(library);
// library2.name = 'NeLu4waya'

// const book2 = {
//   bookName: 'znaika',
//   author: 'MSLKn',
//   quantity: 12,
// };
// const book3 = {
//   bookName: 'aika',
//   author: 'SLKn',
//   quantity: 11,
// };
// library2.addBook(book2)

// console.log(library2.getInfo())

// library2.addBook(book3);

// console.log(library2.getInfo());

// –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—Å–µ —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –Ω–∞–ø–∏—Å–∞–Ω—ã –∑–∞–¥–æ–º –Ω–∞–ø–µ—Ä–µ–¥.

// let string = 'qwertyui';

// const reversString = str => str.split('').reverse().join('');

// console.log(reversString('qWeasdzxcvbnfghfrTy'));

// class Person {
//   constructor(name, age) {
//     this.name = name;
//     this.age = age;
//   }
//   greeting() {
//     return `Hello my name is ${this.name} i am ${this.age} years old`;
//   }
// }

// const vanek = new Person({ name: 'Vanek', age: '52' });

// console.log(vanek.greeting());

// –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Rectangle, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ width –∏ height, –∞ —Ç–∞–∫–∂–µ –º–µ—Ç–æ–¥—ã getArea() (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞) –∏ getPerimeter() (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞).

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∑–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.

// const films = [
//   {
//     name: 'Pila',
//     genre: 'horror',
//     rating: 8.5,
//   },
//   {
//     name: 'Pila-2',
//     genre: 'horror',
//     rating: 8.7,
//   },
//   {
//     name: 'Pila-3',
//     genre: 'horror',
//     rating: 8.1,
//   },
// ];

// function fx(arr, key) {
//   return arr.map(el => el[key]);
// }

// console.log(fx(films, 'name'));

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º (—á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö), –∏ false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

// function palindrom(string) {
//   const reverseString = string.split('').reverse().join('');

//   return (
//     reverseString.toUpperCase().replace(/[^a-zA-Z0-9]/g, '') ===
//     string.toUpperCase().replace(/[^a-zA-Z0-9]/g, '')
//   );
// }

// console.log(palindrom('"Not New York", ‚Äì Roy went on'));

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ —Ç–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ —è–≤–ª—è–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤ —Ä–∞–º–∫–∞—Ö –≤—Å–µ–≥–æ –º–∞—Å—Å–∏–≤–∞.

// const films = [
//   {
//     name: 'Pila',
//     genre: 'horror',
//     rating: 8.5,
//   },
//   {
//     name: 'Pila-2',
//     genre: 'horror',
//     rating: 8.7,
//   },
//   {
//     name: 'Pila-3',
//     genre: 'horror',
//     rating: 8.1,
//   },
// ];

// function fx(arr, string) {
//   arr.filter(film => film[string]);
// }

// function getUniqueObjectsByPropertyValue(array, propertyName) {
//   var seenValues = {};

// —Ñ–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Å–∏–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ –æ–±—ä–µ–∫—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ —è–≤–ª—è–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
//   return array.filter(function (obj) {
//     if (seenValues.hasOwnProperty(obj[propertyName])) {
//       seenValues[obj[propertyName]]++; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å —Ä–∞–Ω–µ–µ
//       return false;
//     } else {
//       seenValues[obj[propertyName]] = 1; // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç
//       return true;
//     }
//   });
// }

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ —Ç–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ —è–≤–ª—è–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤ —Ä–∞–º–∫–∞—Ö –≤—Å–µ–≥–æ –º–∞—Å—Å–∏–≤–∞.

// const films = [
//   {
//     name: 'Pila',
//     genre: 'horror',
//     rating: 8.5,
//   },
//   {
//     name: 'Pila-2',
//     genre: 'horror',
//     rating: 8.7,
//   },
//   {
//     name: 'American-Pie',
//     genre: 'comedy',
//     rating: 8.1,
//   },
// ];

// function fx(arr, str) {
//   return arr
//     .map(el => el[str])
//     .filter(
//       (elem, index, array) =>
//         array.indexOf(elem) === index && array.lastIndexOf(elem) === index
//     );
// }

// console.log(fx(films, 'genre'));

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–±—ä–µ–∫—Ç—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –∏–ª–∏ —É–±—ã–≤–∞–Ω–∏—è (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏).

// const movies = [
//   {
//     title: 'The Shawshank Redemption',
//     director: 'Frank Darabont',
//     year: 1994,
//   },
//   {
//     title: 'The Godfather',
//     director: 'Francis Ford Coppola',
//     year: 1972,
//   },
//   {
//     title: 'The Dark Knight',
//     director: 'Christopher Nolan',
//     year: 2008,
//   },
// ];

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—Å–µ —Å–ª–æ–≤–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ "Hello world" —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É "olleH dlrow"

// const string = 'Hello world';

// const reverseString = str =>
//   str.split('').reverse().join('').split(' ').reverse().join(' ');

// console.log(reverseString(string));

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —ç—Ç–∏—Ö —á–∏—Å–µ–ª.

// const array = [1, 2, 3, 4, 5, 6, 7];

// const fx = arr => arr.map(a => a * a);

// console.log(fx(array));

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.

// const str = 'Sveta jgi';

// function words(str1) {
//   return str1.split('').reverse().join('');
// }
// console.log(words(str));

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –º–∞—Å—Å–∏–≤–∞ [1, 2, 3] —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]].

// const arr = [1, 2, 3];

// function getAllCombinations(arr) {
//   if (arr.length === 0) {
//     // –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
//     return [[]]; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ –≤–∏–¥–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
//   } else {
//     const [first, ...rest] = arr;
//     const restCombinations = getAllCombinations(rest); // —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
//     const merged = restCombinations.flatMap(comb => [comb, [...comb, first]]); // –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –∫–∞–∂–¥–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π
//     return merged;
//   }
// }

// function getCombinations(arr) {
//   const result = [];
//   const generateCombinations = (curArr, startIndex) => {
//     result.push(curArr);
//     for (let i = startIndex; i < arr.length; i++) {
//       generateCombinations(curArr.concat(arr[i]), i + 1);
//     }
//   };
//   generateCombinations([], 0);
//   return result;
// }

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —Å–ª–µ–¥—É—é—â–µ–º—É —É—Å–ª–æ–≤–∏—é: –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –º–∞—Å—Å–∏–≤–∞ [1, 2, 3, 4, 5] —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ [4, 5].

// const array = [1, 2, 3, 4, 5];

// function bigestNumbersInArr(arr) {
//   return arr.filter(a => {return a > arr.reduce((total, num) => num + total, 0) / arr.length;});
// }
// console.log(bigestNumbersInArr(array));

// const arra = [3, 4, 6, 7, 5, 9];

// const filtredAverageArr = arr =>
//   [...arr].filter(
//     (el, arr) => el > arr.reduce((acc, num) => acc + num, 0) / arr.length
// );

// Answer: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–≤–∞ –º–∞—Å–∏–≤–∏ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ —Ç—ñ —á–∏—Å–ª–∞, —è–∫—ñ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è —É –æ–±–æ—Ö –º–∞—Å–∏–≤–∞—Ö.

// const arr1 = [1, 2, 8, 4, 5];
// const arr2 = [6, 7, 8, 9, 1, 23, 11];

// function fundNum(array1, array2) {
//   return array1.filter((num) => array2.includes(num))
// }

// console.log(fundNum(arr1, arr2));

// Answer: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–≤–∞ –º–∞—Å–∏–≤–∏ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ —Ç—ñ —á–∏—Å–ª–∞, —è–∫—ñ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è —É –æ–±–æ—Ö –º–∞—Å–∏–≤–∞—Ö, –∞–ª–µ –ø–æ—Ä—è–¥–æ–∫ —Ü–∏—Ö —á–∏—Å–µ–ª –≤ –º–∞—Å–∏–≤—ñ —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ –ø–æ—Ä—è–¥–∫–æ–º —Ü–∏—Ö —á–∏—Å–µ–ª —É –ø–µ—Ä—à–æ–º—É –º–∞—Å–∏

// const arr1 = [1, 2, 8, 4, 5];
// const arr2 = [6, 7, 8, 2, 1, 23, 11];

// function findNum(arr2, arr1) {
//   const dsd = arr2.filter(num => arr1.includes(num));
//   return dsd
// }

// console.log(findNum(arr2, arr1))

// Answer: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–≤–∞ –º–∞—Å–∏–≤–∏ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ —Ç—ñ —á–∏—Å–ª–∞, —è–∫—ñ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è —É –æ–±–æ—Ö –º–∞—Å–∏–≤–∞—Ö, –∞–ª–µ –ø–æ—Ä—è–¥–æ–∫ —Ü–∏—Ö —á–∏—Å–µ–ª –≤ –º–∞—Å–∏–≤—ñ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –ø–æ—Ä—è–¥–∫—É —Ü–∏—Ö —á–∏—Å–µ–ª —É –ø–µ—Ä—à–æ–º—É –º–∞—Å–∏–≤—ñ. –¢–æ–±—Ç–æ —è–∫—â–æ –ø–µ—Ä—à–∏–π –º–∞—Å–∏–≤ –º—ñ—Å—Ç–∏—Ç—å —á–∏—Å–ª–∞ [2, 3, 4] —Ç–∞ –¥—Ä—É–≥–∏–π –º–∞—Å–∏–≤ –º—ñ—Å—Ç–∏—Ç—å —á–∏—Å–ª–∞ [3, 4, 5], —Ç–æ —Ä–µ–∑—É–ª—å—Ç—É—é—á–∏–π –º–∞—Å–∏–≤ –±—É–¥–µ –º—ñ—Å—Ç–∏—Ç–∏ —á–∏—Å–ª–∞ [2, 3, 4, 5].

// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –ø–∞—Ä–∏ —á–∏—Å–µ–ª, —è–∫—ñ –¥–æ—Ä—ñ–≤–Ω—é—é—Ç—å –∑–∞–¥–∞–Ω–æ–º—É —á–∏—Å–ª—É.

// const arr2 = [6, 7, 8, 2, 1, 23, 11];

// function findSumOfNums(sum, arr2) {
//   const sumArr = [];
//   for (let i = 0; i < arr2.length; i++) {
//     for (let k = i + 1; k < arr2.length; k++) {
//       if (arr2[i] + arr2[k] === sum) sumArr.push(arr2[i] + arr2[k]);
//     }
//   }
//   return sumArr;
// }

// console.log(findSumOfNums(12, arr2));

// –∑–∞–¥–∞—á—É
//  Answer: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ —Ç—ñ —á–∏—Å–ª–∞, —è–∫—ñ –¥–æ—Ä—ñ–≤–Ω—é—é—Ç—å –Ω–∞–π–±—ñ–ª—å—à–æ–º—É —á–∏—Å–ª—É –≤ –º–∞—Å–∏–≤—ñ.

// const arr = [6, 7, 23, 2, 1, 23, 11];

// function findBiggestNum(arr) {
//   return arr.filter(el => el === Math.max(...arr));
// }

// console.log(findBiggestNum(arr));
